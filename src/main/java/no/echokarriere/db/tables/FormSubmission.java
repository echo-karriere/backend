/*
 * This file is generated by jOOQ.
 */
package no.echokarriere.db.tables;


import no.echokarriere.db.Keys;
import no.echokarriere.db.Public;
import no.echokarriere.db.tables.records.FormSubmissionRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormSubmission extends TableImpl<FormSubmissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.form_submission</code>
     */
    public static final FormSubmission FORM_SUBMISSION = new FormSubmission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FormSubmissionRecord> getRecordType() {
        return FormSubmissionRecord.class;
    }

    /**
     * The column <code>public.form_submission.id</code>.
     */
    public final TableField<FormSubmissionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.form_submission.form</code>.
     */
    public final TableField<FormSubmissionRecord, UUID> FORM = createField(DSL.name("form"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.form_submission.data</code>.
     */
    public final TableField<FormSubmissionRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.form_submission.submitted_at</code>.
     */
    public final TableField<FormSubmissionRecord, OffsetDateTime> SUBMITTED_AT = createField(DSL.name("submitted_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.form_submission.modified_at</code>.
     */
    public final TableField<FormSubmissionRecord, OffsetDateTime> MODIFIED_AT = createField(DSL.name("modified_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private FormSubmission(Name alias, Table<FormSubmissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private FormSubmission(Name alias, Table<FormSubmissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.form_submission</code> table reference
     */
    public FormSubmission(String alias) {
        this(DSL.name(alias), FORM_SUBMISSION);
    }

    /**
     * Create an aliased <code>public.form_submission</code> table reference
     */
    public FormSubmission(Name alias) {
        this(alias, FORM_SUBMISSION);
    }

    /**
     * Create a <code>public.form_submission</code> table reference
     */
    public FormSubmission() {
        this(DSL.name("form_submission"), null);
    }

    public <O extends Record> FormSubmission(Table<O> child, ForeignKey<O, FormSubmissionRecord> key) {
        super(child, key, FORM_SUBMISSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FormSubmissionRecord> getPrimaryKey() {
        return Keys.FORM_SUBMISSION_PKEY;
    }

    @Override
    public List<UniqueKey<FormSubmissionRecord>> getKeys() {
        return Arrays.<UniqueKey<FormSubmissionRecord>>asList(Keys.FORM_SUBMISSION_PKEY);
    }

    @Override
    public List<ForeignKey<FormSubmissionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FormSubmissionRecord, ?>>asList(Keys.FORM_SUBMISSION__FORM_SUBMISSION_FORM_FKEY);
    }

    private transient Form _form;

    public Form form() {
        if (_form == null)
            _form = new Form(this, Keys.FORM_SUBMISSION__FORM_SUBMISSION_FORM_FKEY);

        return _form;
    }

    @Override
    public FormSubmission as(String alias) {
        return new FormSubmission(DSL.name(alias), this);
    }

    @Override
    public FormSubmission as(Name alias) {
        return new FormSubmission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FormSubmission rename(String name) {
        return new FormSubmission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FormSubmission rename(Name name) {
        return new FormSubmission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, JSONB, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
