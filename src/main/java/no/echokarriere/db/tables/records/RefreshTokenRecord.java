/*
 * This file is generated by jOOQ.
 */
package no.echokarriere.db.tables.records;


import no.echokarriere.db.tables.RefreshToken;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.OffsetDateTime;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefreshTokenRecord extends UpdatableRecordImpl<RefreshTokenRecord> implements Record4<UUID, String, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.refresh_token.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.refresh_token.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.refresh_token.refresh_token</code>.
     */
    public void setRefreshToken(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.refresh_token.refresh_token</code>.
     */
    public String getRefreshToken() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.refresh_token.expires_at</code>.
     */
    public void setExpiresAt(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.refresh_token.expires_at</code>.
     */
    public OffsetDateTime getExpiresAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.refresh_token.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.refresh_token.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return RefreshToken.REFRESH_TOKEN.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return RefreshToken.REFRESH_TOKEN.REFRESH_TOKEN_;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return RefreshToken.REFRESH_TOKEN.EXPIRES_AT;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return RefreshToken.REFRESH_TOKEN.CREATED_AT;
    }

    @Override
    public UUID component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getRefreshToken();
    }

    @Override
    public OffsetDateTime component3() {
        return getExpiresAt();
    }

    @Override
    public OffsetDateTime component4() {
        return getCreatedAt();
    }

    @Override
    public UUID value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getRefreshToken();
    }

    @Override
    public OffsetDateTime value3() {
        return getExpiresAt();
    }

    @Override
    public OffsetDateTime value4() {
        return getCreatedAt();
    }

    @Override
    public RefreshTokenRecord value1(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value2(String value) {
        setRefreshToken(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value3(OffsetDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public RefreshTokenRecord value4(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public RefreshTokenRecord values(UUID value1, String value2, OffsetDateTime value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RefreshTokenRecord
     */
    public RefreshTokenRecord() {
        super(RefreshToken.REFRESH_TOKEN);
    }

    /**
     * Create a detached, initialised RefreshTokenRecord
     */
    public RefreshTokenRecord(UUID userId, String refreshToken, OffsetDateTime expiresAt, OffsetDateTime createdAt) {
        super(RefreshToken.REFRESH_TOKEN);

        setUserId(userId);
        setRefreshToken(refreshToken);
        setExpiresAt(expiresAt);
        setCreatedAt(createdAt);
    }
}
