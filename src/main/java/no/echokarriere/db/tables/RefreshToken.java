/*
 * This file is generated by jOOQ.
 */
package no.echokarriere.db.tables;


import no.echokarriere.db.Keys;
import no.echokarriere.db.Public;
import no.echokarriere.db.tables.records.RefreshTokenRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefreshToken extends TableImpl<RefreshTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.refresh_token</code>
     */
    public static final RefreshToken REFRESH_TOKEN = new RefreshToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefreshTokenRecord> getRecordType() {
        return RefreshTokenRecord.class;
    }

    /**
     * The column <code>public.refresh_token.user_id</code>.
     */
    public final TableField<RefreshTokenRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.refresh_token.refresh_token</code>.
     */
    public final TableField<RefreshTokenRecord, String> REFRESH_TOKEN_ = createField(DSL.name("refresh_token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.refresh_token.expires_at</code>.
     */
    public final TableField<RefreshTokenRecord, OffsetDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.refresh_token.created_at</code>.
     */
    public final TableField<RefreshTokenRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private RefreshToken(Name alias, Table<RefreshTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefreshToken(Name alias, Table<RefreshTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.refresh_token</code> table reference
     */
    public RefreshToken(String alias) {
        this(DSL.name(alias), REFRESH_TOKEN);
    }

    /**
     * Create an aliased <code>public.refresh_token</code> table reference
     */
    public RefreshToken(Name alias) {
        this(alias, REFRESH_TOKEN);
    }

    /**
     * Create a <code>public.refresh_token</code> table reference
     */
    public RefreshToken() {
        this(DSL.name("refresh_token"), null);
    }

    public <O extends Record> RefreshToken(Table<O> child, ForeignKey<O, RefreshTokenRecord> key) {
        super(child, key, REFRESH_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RefreshTokenRecord> getPrimaryKey() {
        return Keys.REFRESH_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<RefreshTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<RefreshTokenRecord>>asList(Keys.REFRESH_TOKEN_PKEY);
    }

    @Override
    public List<ForeignKey<RefreshTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefreshTokenRecord, ?>>asList(Keys.REFRESH_TOKEN__REFRESH_TOKEN_USER_ID_FKEY);
    }

    private transient User _user;

    public User user() {
        if (_user == null)
            _user = new User(this, Keys.REFRESH_TOKEN__REFRESH_TOKEN_USER_ID_FKEY);

        return _user;
    }

    @Override
    public RefreshToken as(String alias) {
        return new RefreshToken(DSL.name(alias), this);
    }

    @Override
    public RefreshToken as(Name alias) {
        return new RefreshToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(String name) {
        return new RefreshToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(Name name) {
        return new RefreshToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
